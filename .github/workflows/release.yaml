name: Release Automation

on:
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check if version is release candidate
        id: check_rc
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc-[0-9]+$ ]]; then
            echo "is_rc=true" >> $GITHUB_OUTPUT
            echo "This is a release candidate"
          else
            echo "is_rc=false" >> $GITHUB_OUTPUT
            echo "This is a regular release"
          fi

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        id: create_tag
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          TAG_MESSAGE="Release $VERSION"
          
          # Cria a tag
          git tag -a "$VERSION" -m "$TAG_MESSAGE"
          
          # Faz push da tag
          git push origin "$VERSION"
          
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag $VERSION created and pushed"

      - name: Create GitHub Release with Auto-generated Notes
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ steps.create_tag.outputs.tag }}';
            const isRC = '${{ steps.check_rc.outputs.is_rc }}' === 'true';
            
            try {
              // Primeiro, tenta obter a última release para usar como base
              let previousTag = null;
              let releaseNotesBody = `Release ${tag}`;
              
              try {
                const { data: releases } = await github.rest.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 10
                });
                
                if (releases.length > 0) {
                  if (isRC) {
                    // Para RC, usa a última release estável
                    const lastStableRelease = releases.find(r => !r.prerelease);
                    previousTag = lastStableRelease ? lastStableRelease.tag_name : releases[0].tag_name;
                  } else {
                    // Para release normal, usa a última release qualquer
                    const lastRelease = releases.find(r => r.tag_name !== tag);
                    previousTag = lastRelease ? lastRelease.tag_name : null;
                  }
                }
              } catch (error) {
                console.log('No previous releases found, creating first release');
              }
              
              // Gera as release notes se tivermos uma tag anterior
              if (previousTag) {
                try {
                  const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: tag,
                    previous_tag_name: previousTag
                  });
                  releaseNotesBody = releaseNotes.body;
                } catch (error) {
                  console.log('Could not generate release notes, using default body');
                  releaseNotesBody = `Release ${tag}\n\nAuto-generated release notes could not be created.`;
                }
              } else {
                // Primeira release ou não conseguiu encontrar release anterior
                releaseNotesBody = `Release ${tag}\n\nThis is the first release of this repository.`;
              }
              
              // Cria a release
              const { data: release } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: tag,
                body: releaseNotesBody,
                draft: false,
                prerelease: isRC,
                make_latest: isRC ? 'false' : 'true'
              });
              
              console.log(`Release ${tag} created successfully!`);
              console.log(`Release URL: ${release.html_url}`);
              console.log(`Is prerelease: ${isRC}`);
              console.log(`Make latest: ${!isRC}`);
              console.log(`Previous tag used: ${previousTag || 'none'}`);
              
            } catch (error) {
              console.error('Error creating release:', error);
              console.error('Error details:', error.message);
              throw error;
            }